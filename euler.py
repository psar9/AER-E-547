import sympy as sym
r,u,p,g,q1,q2,q3,Et,c = sym.symbols('r,u,p,g,q1,q2,q3,Et,c')
F = [r*u, r*u**2 + p, (r*Et + p)*u]
Q = [r,r*u,r*Et]
Fq = [q2, (q2**2/q1) + (g-1)*(q3 - q2**2/(2*q1)), (q3*q2/q1) + (g-1)*(q3 - 0.5*q2**2/q1)*(q2/q1)]
Qq = [q1, q2, q3]
U = [r, u, p]
Aq = sym.simplify(sym.Matrix(Fq).jacobian(Qq))
A = sym.simplify(Aq.subs([(Qq[0],Q[0]),(Qq[1],Q[1]),(Qq[2],Q[2])]))
#p = r*(g-1)*(Et-0.5*u**2)
#Et = ((p/(r*(g-1)))+(u**2/2))
Qp = [r, r*u, r*((p/(r*(g-1)))+(u**2/2))]
P = sym.Matrix(Qp).jacobian(U)
iP = sym.simplify(P.inv())
AE = A.subs(Et,(p/(r*(g-1)))+(u**2/2))
B = sym.simplify(iP*AE*P)
(EA,DA) = A.diagonalize()
(EB,DB) = B.diagonalize()
DBc = sym.simplify(DB.subs(sym.sqrt(g*p*r)/r, c))
EBc = sym.simplify(EB.subs([(sym.sqrt(g*p*r)/r, c),(g*p, r*c**2),(r/(g*p), 1/c**2)]))
iEBc = EBc.inv()
X = P*EBc
X = sym.Matrix(X)
X[:,1] = c**2*X[:,1]
X[:,2] = c**2*X[:,2]
X = sym.simplify(X)
#lambda_p = sym.diag(0.5*(u + abs(u)), 0.5*((u-c) + abs(u-c)), 0.5*((u+c) + abs(u+c)))
#lambda_n = sym.diag(0.5*(u - abs(u)), 0.5*((u-c) - abs(u-c)), 0.5*((u+c) - abs(u+c)))
lambda_p = sym.diag(0.5*(u + abs(u)), 0.5*((u-c) + abs(u-c)), 0)
lambda_n = sym.diag(0, 0, 0.5*((u+c) - abs(u+c)))
Ap = sym.simplify(X*lambda_p*X.inv())
An = sym.simplify(X*lambda_n*X.inv())
Fp = sym.simplify((1/(r*c))*sym.Matrix(Ap)*sym.Matrix(Qp))
Fn = sym.simplify((1/(r*c))*sym.Matrix(An)*sym.Matrix(Qp))